%% This script demonstrates the impact of Maxwell (concomitant) gradient %  fields for a bipolar diffusion gradient %% Code Author: Matt Middione and Daniel Ennis%% DBE@STANFORD.EDU (April 2020) for Rad229%% Variablesmatrix = 256;               % Image matrix size, unitlessfov = 0.256;                % Field-of-view [m]alpha = 15;                 % Gradient echo flip angle [degrees]TR=3000e-3;                 % Repetition time [s]TE=  50e-3;                 % Echo time [s]B0=0.5;                     % Field strength [T]gMax=100e-3;                % Maximum gradient amplitude [T/m]sMax=200;                   % Maximum gradient slewrate [T/m/s]dt=100e-6;                  % Time-step [s]dG=sMax*dt;                 % Maximum gradient increment per time step [T/m]deltaDiff=12.8e-3;          % Diffusion gradient lobe duration [s]G_dir=[1 -1 1];             % Gradient direction vectorpos=[-fov/2 fov/2 fov/2];   % Distance from isocenter along (x,y,z) [m]X_pos=-(fov/2):(fov/matrix):(fov/2);Y_pos=-(fov/2):(fov/matrix):(fov/2);[Y,X]=ndgrid(X_pos,Y_pos);%% Generate a bipolar diffusion gradientG_rise=0:dG:gMax;G_flat=gMax*ones(1,13*dG*1e3);G_trans=gMax:-2*dG:-gMax;G_fall=-gMax:dG:0;G=[G_rise G_flat G_trans -G_flat G_fall]; % Concatenate the gradient eventstvec=0:dt:dt*(length(G)-1);               % Time vector [s]% Calculate the b-valuegamma=267.52e6;     % Gyromagnetic ratio [rad/s/T]b_val=2*gamma^2.*(gMax.*G_dir).^2.*((deltaDiff)^3/3)*1e-6; % [s/mm^2]%% Calculate the Concomitant gradient fields for the given parametersG_0=G.*G_dir';            % Target gradientsGCt=zeros(3,3,length(G)); % Initialize concomitant gradient matrixdGC=zeros(3,length(G));   % Initialize concomitant gradient waveformsfor t=1:length(G)    % Concomitant gradient matrix    GCt(:,:,t)=(1/(4*B0)).*[G_0(3,t)^2            0                     -2*G_0(1,t)*G_0(3,t);                             0                     G_0(3,t)^2            -2*G_0(2,t)*G_0(3,t);                             -2*G_0(1,t)*G_0(3,t)  -2*G_0(2,t)*G_0(3,t)  4*G_0(1,t)^2 + 4*G_0(2,t)^2];    % Concomitant gradient waveform offset (delta)    dGC(:,t)=GCt(:,:,t)*pos';      end% Comcomitant corrupted gradient waveforms (Target + delta Concominant)G_C=G_0+dGC;%% Compare the target and concomitant corrupted gradient waveformsset(groot,'defaultLineLineWidth',3,'defaultLineMarkerSize',25,'defaultAxesFontSize',18);f=figure; hold on; xlabel('Time [s]'); ylabel('G(t) [mT/m]');% X-axissubplot(3,3,1); plot(tvec,G_0(1,:)); axis([0 0.06 -0.110 0.110]); title('Desired G(t)'); ylabel('G_{x}(t) [mT/m]');subplot(3,3,2); plot(tvec,dGC(1,:)); axis([0 0.06 -0.011 0.011]); title('Concomitant G(t)');subplot(3,3,3); plot(tvec,G_C(1,:)); axis([0 0.06 -0.110 0.110]); title('Actual G(t)'); % Y-axissubplot(3,3,4); plot(tvec,G_0(2,:)); axis([0 0.06 -0.110 0.110]); ylabel('G_{y}(t) [mT/m]');subplot(3,3,5); plot(tvec,dGC(2,:)); axis([0 0.06 -0.011 0.011]);subplot(3,3,6); plot(tvec,G_C(2,:)); axis([0 0.06 -0.110 0.110]); % Z-axissubplot(3,3,7); plot(tvec,G_0(3,:)); axis([0 0.06 -0.110 0.110]); ylabel('G_{z}(t) [mT/m]');subplot(3,3,8); plot(tvec,dGC(3,:)); axis([0 0.06 -0.011 0.011]); xlabel('Time [ms]');subplot(3,3,9); plot(tvec,G_C(3,:)); axis([0 0.06 -0.110 0.110]); %% Calculate the new b-values for each axis due to concomitant fieldsbXcg=2*gamma^2*(max(G_C(1,:)))^2*((deltaDiff)^3/3)*1e-6;bYcg=2*gamma^2*(max(G_C(2,:)))^2*((deltaDiff)^3/3)*1e-6;bZcg=2*gamma^2*(max(G_C(3,:)))^2*((deltaDiff)^3/3)*1e-6;f=figure; hold on;  y = [b_val(1,1) bXcg abs(bXcg-b_val(1,1)); b_val(1,2) bYcg abs(bYcg-b_val(1,2)); b_val(1,3) bZcg abs(bZcg-b_val(1,3))];  bar(y); axis([0.5          3.5            0         max(b_val)]);  xlabel('Diffusion Gradient Axis'); ylabel('b-value [s/mm^{2}]');  legend('Without CG','With CG','Difference','Location','NorthWest');  xticklabels({'' 'X' '' 'Y' '' 'Z'}); title('b-value [s/mm^2] FOV/2 from isocenter');  %% Calculate the Concomitant gradient fields across the FOV at isocenter, +100m along z, and +200mm along zG_0=G.*G_dir'; % Desired gradientsGCt=zeros(3,3,length(G)); % Concomitant gradient matrixfor t=1:length(G)    GCt(:,:,t)=(1/(4*B0)).*[G_0(3,t)^2            0                     -2*G_0(1,t)*G_0(3,t);                             0                     G_0(3,t)^2            -2*G_0(2,t)*G_0(3,t);                             -2*G_0(1,t)*G_0(3,t)  -2*G_0(2,t)*G_0(3,t)  4*G_0(1,t)^2 + 4*G_0(2,t)^2];end  Cx=zeros(matrix+1,matrix+1,3);Cy=zeros(matrix+1,matrix+1,3);Cz=zeros(matrix+1,matrix+1,3);% Concomitant gradient fields across the FOV[gtMax,gtInd] = max(abs(GCt(:))); % Don't need entire G(t) waveform, just the index of max(abs(GCt))for x=-matrix/2:1:matrix/2    for y=-matrix/2:1:matrix/2        for z=[0 100 200]            Cx(x+matrix/2+1,y+matrix/2+1,z/100+1)=GCt(1,1,gtInd)*x/1000 + GCt(1,2,gtInd)*y/1000 + GCt(1,3,gtInd)*z/1000;            Cy(x+matrix/2+1,y+matrix/2+1,z/100+1)=GCt(2,1,gtInd)*x/1000 + GCt(2,2,gtInd)*y/1000 + GCt(2,3,gtInd)*z/1000;            Cz(x+matrix/2+1,y+matrix/2+1,z/100+1)=GCt(3,1,gtInd)*x/1000 + GCt(3,2,gtInd)*y/1000 + GCt(3,3,gtInd)*z/1000;        end    endend% f=figure; hold on;%     subplot(3,3,1); s(1)=surf(X,Y,Cx(:,:,1)); view(2); axis tight;%     title('G_{c,x} @ z=0'); colorbar; caxis([-2e-3 2e-3])%     subplot(3,3,2); s(2)=surf(X,Y,Cy(:,:,1)); view(2); axis tight;%     title('G_{c,y} @ z=0'); colorbar; caxis([-2e-3 2e-3])%     subplot(3,3,3); s(3)=surf(X,Y,Cz(:,:,1)); view(2); axis tight;%     title('G_{c,z} @ z=0'); colorbar; caxis([-2e-3 10e-3])%     subplot(3,3,4); s(4)=surf(X,Y,Cx(:,:,2)); view(2); axis tight;%     title('G_{c,x} @ z=100mm'); colorbar; caxis([-2e-3 2e-3])%     subplot(3,3,5); s(5)=surf(X,Y,Cy(:,:,2)); view(2); axis tight;%     title('G_{c,y} @ z=100mm'); colorbar; caxis([-2e-3 2e-3])%     subplot(3,3,6); s(6)=surf(X,Y,Cz(:,:,2)); view(2); axis tight;%     title('G_{c,z}vz=100mm'); colorbar; caxis([-2e-3 10e-3])%     subplot(3,3,7); s(7)=surf(X,Y,Cx(:,:,3)); view(2); axis tight; %     title('G_{c,x} @ z=200mm'); colorbar; caxis([-2e-3 2e-3])%     subplot(3,3,8); s(8)=surf(X,Y,Cy(:,:,3)); view(2); axis tight; %     title('G_{c,y} @ z=200mm'); colorbar; caxis([-2e-3 2e-3])%     subplot(3,3,9); s(9)=surf(X,Y,Cz(:,:,3)); view(2); axis tight; %     title('G_{c,z} @ z=200mm'); colorbar; caxis([-2e-3 10e-3])%     set(gcf, 'position', [0 600 5*matrix 4*matrix]);%     set(s,'edgecolor','none');%% Calculate the Concomitant gradient field b-value offset across the FOV at isocenter, +100m along z, and +200mm along zDeltabX=zeros(matrix+1,matrix+1,3);DeltabY=zeros(matrix+1,matrix+1,3);DeltabZ=zeros(matrix+1,matrix+1,3);for x=-matrix/2:1:matrix/2    for y=-matrix/2:1:matrix/2        for z=[0 100 200]            % Calculate the gradient offsets due to CG effects            CGoffsetX = gMax*G_dir(1,1) + Cx(x+matrix/2+1,y+matrix/2+1,z/100+1);            CGoffsetY = gMax*G_dir(1,2) + Cy(x+matrix/2+1,y+matrix/2+1,z/100+1);            CGoffsetZ = gMax*G_dir(1,3) + Cz(x+matrix/2+1,y+matrix/2+1,z/100+1);            % Calculate the delta b-value            DeltabX(x+matrix/2+1,y+matrix/2+1,z/100+1)=2*gamma^2*(CGoffsetX)^2*((deltaDiff)^3/3)*1e-6;            DeltabY(x+matrix/2+1,y+matrix/2+1,z/100+1)=2*gamma^2*(CGoffsetY)^2*((deltaDiff)^3/3)*1e-6;            DeltabZ(x+matrix/2+1,y+matrix/2+1,z/100+1)=2*gamma^2*(CGoffsetZ)^2*((deltaDiff)^3/3)*1e-6;            end    endend% f=figure; hold on;%     subplot(3,3,1); s(1)=surf(X,Y,DeltabX(:,:,1)-b_val(1,1)); view(2); axis tight; %     title('\Deltab_{x}-value @ z=0'); colorbar;  %     subplot(3,3,2); s(2)=surf(X,Y,DeltabY(:,:,1)-b_val(1,2)); view(2); axis tight;%     title('\Deltab_{y}-value @ z=0'); colorbar; %     subplot(3,3,3); s(3)=surf(X,Y,DeltabZ(:,:,1)-b_val(1,3)); view(2); axis tight;%     title('\Deltab_{z}-value @ z=0'); colorbar; %     subplot(3,3,4); s(4)=surf(X,Y,DeltabX(:,:,2)-b_val(1,1)); view(2); axis tight;%     title('\Deltab_{x}-value @ z=100mm'); colorbar; %     subplot(3,3,5); s(5)=surf(X,Y,DeltabY(:,:,2)-b_val(1,2)); view(2); axis tight;%     title('\Deltab_{y}-value @ z=100mm'); colorbar; %     subplot(3,3,6); s(6)=surf(X,Y,DeltabZ(:,:,2)-b_val(1,3)); view(2); axis tight;%     title('\Deltab_{z}-value @ z=100mm'); colorbar;   %     subplot(3,3,7); s(7)=surf(X,Y,DeltabX(:,:,3)-b_val(1,1)); view(2); axis tight; %     title('\Deltab_{x}-value @ z=200mm'); colorbar; %     subplot(3,3,8); s(8)=surf(X,Y,DeltabY(:,:,3)-b_val(1,2)); view(2); axis tight; %     title('\Deltab_{y}-value @ z=200mm'); colorbar; %     subplot(3,3,9); s(9)=surf(X,Y,DeltabZ(:,:,3)-b_val(1,3)); view(2); axis tight; %     title('\Deltab_{z}-value @ z=200mm'); colorbar; %     set(gcf, 'position', [0 600 5*matrix 4*matrix]);%     set(s,'edgecolor','none');    %%  Load the "modified Shepp-Logan" phantom parameters[P,E]=phantom('modified shepp-logan',matrix+1); clear P;        % Create a separate "phantom" for each object.P=zeros(matrix+1,matrix+1,size(E,1));M=zeros(matrix+1,matrix+1,size(E,1));for n=1:size(E,1)  P(:,:,n)=phantom([1 E(n,2:end)],matrix+1);  % Force intensities to be ONE  M(:,:,n)=P(:,:,n)~=0;end% Make a "skull," "white-matter" and parse the backgroundQ(:,:,1)=~M(:,:,1) & ~M(:,:,2); % BackgroundQ(:,:,2)= M(:,:,1) &  M(:,:,2); % White-matterQ(:,:,3)= M(:,:,1) & ~M(:,:,2); % "Skull" M=cat(3,Q,M(:,:,3:end));M(:,:,2)=~(sum(M,3)>1) & Q(:,:,2);  % This makes the "white matter" only everywhere around the ROIs (no overlap)% Assign tissue parameters to each feature.% Note, these are 1.5T values!% T1/T2 values are in [s] % ADC values are in [mm^2/s] T1_fat=260e-3;T2_fat=85e-3;T2s_fat=0.5*85e-3;PD_fat=1.0;T1_WM=790e-3;T2_WM=92e-3;T2s_WM=0.5*92e-3;PD_WM=0.9;T1_GM=925e-3;T2_GM=100e-3;T2s_GM=0.5*100e-3;PD_GM=1.0;T1_CSF=2400e-3;T2_CSF=180e-3;T2s_CSF=0.5*180e-3;PD_CSF=1.0;ADC_fat=0.2e-3;ADC_WM=1.0e-3; ADC_GM=2.0e-3;ADC_CSF=3e-3;ADC(:,:, 1)=0      *M(:,:, 1); T1(:,:, 1)=0     *M(:,:, 1); T2(:,:, 1)=0     *M(:,:, 1); T2s(:,:, 1)=0      *M(:,:, 1); PD(:,:, 1)=0     *M(:,:, 1); %  BackgroundADC(:,:, 2)=ADC_WM *M(:,:, 2); T1(:,:, 2)=T1_WM *M(:,:, 2); T2(:,:, 2)=T2_WM *M(:,:, 2); T2s(:,:, 2)=T2s_WM *M(:,:, 2); PD(:,:, 2)=PD_WM *M(:,:, 2); %  WMADC(:,:, 3)=ADC_fat*M(:,:, 3); T1(:,:, 3)=T1_fat*M(:,:, 3); T2(:,:, 3)=T2_fat*M(:,:, 3); T2s(:,:, 3)=T2s_fat*M(:,:, 3); PD(:,:, 3)=PD_fat*M(:,:, 3); %  FatADC(:,:, 4)=ADC_fat*M(:,:, 4); T1(:,:, 4)=T1_fat*M(:,:, 4); T2(:,:, 4)=T2_fat*M(:,:, 4); T2s(:,:, 4)=T2s_fat*M(:,:, 4); PD(:,:, 4)=PD_fat*M(:,:, 4); %  Middle-right oblique - FatADC(:,:, 5)=ADC_GM *M(:,:, 5); T1(:,:, 5)=T1_GM *M(:,:, 5); T2(:,:, 5)=T2_GM *M(:,:, 5); T2s(:,:, 5)=T2s_GM *M(:,:, 5); PD(:,:, 5)=PD_GM *M(:,:, 5); %  Middle-left oblique - GMADC(:,:, 6)=ADC_CSF*M(:,:, 6); T1(:,:, 6)=T1_CSF*M(:,:, 6); T2(:,:, 6)=T2_CSF*M(:,:, 6); T2s(:,:, 6)=T2s_CSF*M(:,:, 6); PD(:,:, 6)=PD_CSF*M(:,:, 6); %  Middle-top large - CSFADC(:,:, 7)=ADC_CSF*M(:,:, 7); T1(:,:, 7)=T1_CSF*M(:,:, 7); T2(:,:, 7)=T2_CSF*M(:,:, 7); T2s(:,:, 7)=T2s_CSF*M(:,:, 7); PD(:,:, 7)=PD_CSF*M(:,:, 7); %  Middle-top small - CSFADC(:,:, 8)=ADC_CSF*M(:,:, 8); T1(:,:, 8)=T1_CSF*M(:,:, 8); T2(:,:, 8)=T2_CSF*M(:,:, 8); T2s(:,:, 8)=T2s_CSF*M(:,:, 8); PD(:,:, 8)=PD_CSF*M(:,:, 8); %  Middle-middle small - CSFADC(:,:, 9)=ADC_CSF*M(:,:, 9); T1(:,:, 9)=T1_CSF*M(:,:, 9); T2(:,:, 9)=T2_CSF*M(:,:, 9); T2s(:,:, 9)=T2s_CSF*M(:,:, 9); PD(:,:, 9)=PD_CSF*M(:,:, 9); %  Bottom-left small - CSFADC(:,:,10)=ADC_CSF*M(:,:,10); T1(:,:,10)=T1_CSF*M(:,:,10); T2(:,:,10)=T2_CSF*M(:,:,10); T2s(:,:,10)=T2s_CSF*M(:,:,10); PD(:,:,10)=PD_CSF*M(:,:,10); %  Bottom-middle small - CSFADC(:,:,11)=ADC_CSF*M(:,:,11); T1(:,:,11)=T1_CSF*M(:,:,11); T2(:,:,11)=T2_CSF*M(:,:,11); T2s(:,:,11)=T2s_CSF*M(:,:,11); PD(:,:,11)=PD_CSF*M(:,:,11); %  Bottom-right small - CSF% Define the mean values within each pixel (some ROIs overlap...)PD_mean =sum(PD, 3) ./sum(M(:,:,2:end),3);T1_mean =sum(T1, 3) ./sum(M(:,:,2:end),3);T2_mean =sum(T2, 3) ./sum(M(:,:,2:end),3);T2s_mean=sum(T2s,3) ./sum(M(:,:,2:end),3);ADC_mean=sum(ADC, 3)./sum(M(:,:,2:end),3);%% Generate a T2-weighted imageT2im=PD_mean.*(sin(alpha/180*pi).*(1-exp(-TR./T1_mean))./(1-(cos(alpha/180*pi).*exp(-TR./T1_mean)))).*exp(-TE./T2s_mean);T2im(isnan(T2im))=0;figure; imagesc(T2im); title('T2-weighted Image'); axis off; axis square; colorbar; colormap(gray);%% Generate ADC maps in the absence of Concomitant fieldsSDx=T2im.*exp(-b_val(1,1).*ADC_mean); ADCimX=(log(SDx./T2im))./-b_val(1,1); ADCimX(isnan(ADCimX))=0;SDy=T2im.*exp(-b_val(1,2).*ADC_mean); ADCimY=(log(SDy./T2im))./-b_val(1,2); ADCimY(isnan(ADCimY))=0;SDz=T2im.*exp(-b_val(1,3).*ADC_mean); ADCimZ=(log(SDz./T2im))./-b_val(1,3); ADCimZ(isnan(ADCimZ))=0;% Generate ADC maps due to Concomitant fieldsADCimXcg=zeros(matrix+1,matrix+1);ADCimYcg=zeros(matrix+1,matrix+1);ADCimZcg=zeros(matrix+1,matrix+1);z = 3; % Z-position cooresponds to a distance of +200mm from isocenterfor x=-matrix/2:1:matrix/2    for y=-matrix/2:1:matrix/2        % Shortening each code line by using indexes        indX=x+matrix/2+1;        indY=y+matrix/2+1;        % Determine the position dependent ADC values for the x-axis        SDxCG=T2im(indX,indY).*exp(-(DeltabX(indX,indY,3)).*ADC_mean(indX,indY));         ADCimXcg(indX,indY)=(log(SDxCG./T2im(indX,indY)))./-b_val(1,1);         % Determine the position dependent ADC values for the y-axis        SDyCG=T2im(indX,indY).*exp(-(DeltabY(indX,indY,3)).*ADC_mean(indX,indY));         ADCimYcg(indX,indY)=(log(SDyCG./T2im(indX,indY)))./-b_val(1,2);         % Determine the position dependent ADC values for the z-axis        SDzCG=T2im(indX,indY).*exp(-(DeltabZ(indX,indY,3)).*ADC_mean(indX,indY));         ADCimZcg(indX,indY)=(log(SDzCG./T2im(indX,indY)))./-b_val(1,3);     endendADCimXcg(isnan(ADCimXcg))=0;ADCimYcg(isnan(ADCimYcg))=0;ADCimZcg(isnan(ADCimZcg))=0;f=figure; hold on;    subplot(2,3,1); imagesc(ADCimX); title('X-Axis True ADC Map');     colorbar; axis off; caxis([0.5e-3 3e-3]); colormap(hot);    subplot(2,3,2); imagesc(ADCimY); title('Y-Axis True ADC Map');     colorbar; axis off; caxis([0.5e-3 3e-3]); colormap(hot);    subplot(2,3,3); imagesc(ADCimZ); title('Z-Axis True ADC Map');     colorbar; axis off; caxis([0.5e-3 3e-3]); colormap(hot);    subplot(2,3,4); imagesc(ADCimXcg-ADCimX); title('X-Axis \DeltaADC Map');     colorbar; axis off; caxis([-2e-4 0e-4]); colormap(hot);    subplot(2,3,5); imagesc(ADCimYcg-ADCimY); title('Y-Axis \DeltaADC Map');     colorbar; axis off; caxis([-2e-4 0e-4]); colormap(hot);    subplot(2,3,6); imagesc(ADCimZcg-ADCimZ); title('Z-Axis \DeltaADC Map');     colorbar; axis off; caxis([1.0e-4 2e-4]);    set(gcf, 'position', [0 600 6*matrix 3*matrix]);    colormap('parula')